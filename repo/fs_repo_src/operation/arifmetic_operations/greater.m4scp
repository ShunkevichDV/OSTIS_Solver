
/* -----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modfirst_ely
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  first_el not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

// ///////////////////////////////////////////////////
//        File: greater.m4scp
// Description: Файл содержит операцию сравнения двух величин 
//              операцией больше
// ///////////////////////////////////////////////////
// 		Author: Sergei Zalivako
//        Date: 16.06.2011 

#include "scp_keynodes.scsy"
#include "etc_questions.scsy"
#include "com_keynodes.scsy"
#include "lib_search.scsy"
#include "lib_check.scsy"
#include "lib_gen.scsy"
#include "lib_answer.scsy"
#include "lib_set.scsy"

program(init_op,
[[
	// Вызываемая SCP-программа
	greater;
	// Ключевой узел, обозначающий инициированный вопрос
	q_initiated;
	// Событие, на которое реагирует обработчик(проведение выходящей дуги из узла)
	catch_output_arc;
	group_arifmetic_descr;
]],
[{
	descr,arc
}],
{[
]}
)
// Установка обработчика события на проведение дуги  из узла "инициированный запрос" 
sys_set_event_handler([
	1_: fixed_: catch_output_arc,
	2_: fixed_: greater,
	3_: fixed_: {1_: q_initiated},
	4_: assign_: descr
])


genElStr3([
	1_: fixed_: group_arifmetic_descr,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: descr
])

return()	
end


procedure(greater,
[[
	// Ключевой узел, обозначающий запрос
	q_arifmetic_routine;

	// Атрибут присутствия ответа
	rrel_answer_is_present;
	
	// Атрибут того, что операция выполнилась
	rrel_operation_is_over;

	// Ключевой узел отношения больше в базе знаний
	nrel_greater;
	
	// Процедура проверки единиц измерения
	check_unit_of_measure;
	
	// Процедура поиска значения величины
	search_quantity_value;
	
	// Процедура генерации значения величины
	gen_quantity_value;
	
	// Атрибут для обозначения десятичного числа
	rrel_decimal_number;
	
	// Процедура для генерации ответа
	answer_make;
	
	// Узел, содержимым которого является число 0
	zero =n= 0;
	
	// Узел, содержимым которого является число 1
	one =n= 1;
	
]],
[{
	handler, element, questionNode,
	arcFromRequest, arcFromQuestion,
	location, segments, checkingNode,
	greaterLink, greaterLinkCopy,
	arcForChecking, arcVar, attributeArc, nodeVar,
	greaterElementValue, lessElementValue,
	greaterElement, lessElement,
	answer
	
}],
{[
	1_: in_: handler, 
	2_: in_: element, 
	3_: in_: arcFromQuestion, 
	4_: in_: questionNode 
]}
)
// Получение сегмента, в кототором находится узел связки запроса арифметического действия
sys_get_location([
	1_: fixed_: questionNode,
	2_: assign_: location
])

// Установка найденного сегмента как основного
sys_set_default_segment([
	1_: fixed_: location
])

// Разворачивание установленного сегмента
sys_spin_segment([
	1_: fixed_: location,
	2_: assign_: segments
])

// Проверяем, что в узел запроса проведена дуга из узла "запрос арифметического действия"
searchElStr3([
	1_: fixed_: q_arifmetic_routine,
	2_: assign_: const_: pos_: arc_: arcFromRequest,
	3_: fixed_: questionNode
], , finishOperation)

// Находим связку отношения больше из вопроса
searchElStr3([
	1_: fixed_: questionNode,
	2_: assign_: const_: pos_: arc_: arcForChecking,
	3_: assign_: const_: node_: greaterLink
], , finishOperation)

// Проверяем, что связка, в которую была проведена дуга из запроса явлется именно связкой отношения больше
searchElStr3([
	1_: fixed_: nrel_greater,
	2_: assign_: const_: pos_: actual_: arc_: arcForChecking,
	3_: fixed_: greaterLink
], , finishOperation)

// Поиск связки вопроса с атрибутом "присутствует ответ_"
// Если такой атрибут есть, то работа программы прекращается
searchElStr5([
	1_: fixed_: q_arifmetic_routine,
	2_: fixed_: arcFromRequest,
	3_: fixed_: questionNode,
	4_: assign_: arc_: const_: pos_: actual_: arcVar,
	5_: fixed_: rrel_answer_is_present
], exit)

// Делаем копию связки отношения больше для проверки единиц измерения входящих в него компонентов
searchSetStr3([
	1_: fixed_: greaterLink,
	2_: assign_: arc_: const_: pos_: actual_: arcVar,
	3_: assign_: node_: const_: nodeVar,
	set3_: assign_: node_: const_: greaterLinkCopy
])

// Проверяем единицы измерения всех компонентов отношения больше
callReturn([
	1_: fixed_: check_unit_of_measure,
	2_: fixed_: {[
		1_: greaterLinkCopy,
		2_: checkingNode
	]}
])

// Проверяем результат выполнения процедуры проверки единиц измерения
ifVarAssign([
	1_: checkingNode
], , exit)

// Находим величину, значение которой предположительно больше
searchElStr5([
	1_: fixed_: greaterLink,
	2_: assign_: arc_: const_: pos_: actual_: arcVar,
	3_: assign_: const_: node_: greaterElementValue,
	4_: assign_: arc_: const_: pos_: actual_: attributeArc,
	5_: fixed_: 1_
], , exit)

// Находим значение предположительно большей величины
callReturn([
	1_: fixed_: search_quantity_value,
	2_: fixed_: {[
		1_: greaterElementValue,
		2_: greaterElement
	]}
])

// Проверяем значение предположительно большей величины
ifVarAssign([
	1_: greaterElement
], , exit)

// Находим величину, значение которой предположительно меньше
searchElStr5([
	1_: fixed_: greaterLink,
	2_: assign_: arc_: const_: pos_: actual_: arcVar,
	3_: assign_: const_: node_: lessElementValue,
	4_: assign_: arc_: const_: pos_: actual_: attributeArc,
	5_: fixed_: 2_
], , exit)

// Находим значение предположительно меньшей величины
callReturn([
	1_: fixed_: search_quantity_value,
	2_: fixed_: {[
		1_: lessElementValue,
		2_: lessElement
	]}
])

// Проверяем значение предположительно меньшей величины
ifVarAssign([
	1_: greaterElement
], , exit)

// Проверяем, что предроложительно большая величина 
// действительно больше предположительно меньшей
ifGr([
	1_: fixed_: greaterElement,
	2_: fixed_: lessElement
], , exit)

// Вычисление осуществлено успешно
label(calculationSuccess)
	
	printNl([
		1_: fixed_: /"Greater is true"/
	])
	
	// Генерируем факт присутствия ответа
	genElStr5([
		1_: fixed_: q_arifmetic_routine,
		2_: fixed_: arcFromRequest,
		3_: fixed_: questionNode,
		4_: assign_: arc_: const_: pos_: actual_: arcVar,
		5_: fixed_: rrel_answer_is_present
	], makingAnswer, makingAnswer)

// Неуспешное выполнение операции
label(exit)

	printNl([
		1_: fixed_: /"Greater is false"/
	])

// Формирование ответа на запрос степени
label(makingAnswer)

	// Генерируем узел для вывода ответа
	genEl([
		1_: assign_: const_: node_: answer
	])
		
	// Добавляем в ответ узел запроса степени
	genElStr3([
		1_: fixed_: answer,
		2_: assign_: const_: pos_: arc_: arcVar,
		3_: fixed_: q_arifmetic_routine
	])
	
	// Добавляем в ответ дугу из узла запроса степени
	genElStr3([
		1_: fixed_: answer,
		2_: assign_: const_: pos_: arc_: arcVar,
		3_: fixed_: arcFromRequest
	])
	
	// Добавляем в ответ связку запроса степени
	genElStr3([
		1_: fixed_: answer,
		2_: assign_: const_: pos_: arc_: arcVar,
		3_: fixed_: questionNode
	])
	
	// Если дуга из узла "присутствует ответ_" не проводилась
	ifVarAssign([
		1_: attributeArc
	], , withoutAnswerIsPresent)
	
	// Добавляем в ответ узел "присутствует ответ_"
	genElStr3([
		1_: fixed_: answer,
		2_: assign_: const_: pos_: arc_: arcVar,
		3_: fixed_: rrel_answer_is_present
	])
	
	// Добавляем в ответ дугу из узла "присутствует ответ_"
	genElStr3([
		1_: fixed_: answer,
		2_: assign_: const_: pos_: arc_: arcVar,
		3_: fixed_: attributeArc
	])
	
// Создание ответа операции
label(withoutAnswerIsPresent)
	
	// Генерация ответа операции
	callReturn([
		1_:	fixed_: answer_make,
		2_:	fixed_: {[
			1_: questionNode,
			2_: answer
		]}
	])
	
	// Генерируем факт выполнения операции
	genElStr5([
		1_: fixed_: q_arifmetic_routine,
		2_: fixed_: arcFromRequest,
		3_: fixed_: questionNode,
		4_: assign_: arc_: const_: pos_: actual_: arcVar,
		5_: fixed_: rrel_operation_is_over
	])
	
label(finishOperation)

return()
	
end