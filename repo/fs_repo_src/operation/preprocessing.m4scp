
#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_gen.scsy"
#include "meta_info.scsy"
#include "lib_set.scsy"
#include "lib_preprocessing.scsy"
#include "lib_check.scsy"
#include "lib_system.scsy"

program(preprocessing,
[[	
	pi="/seb/planimetry/M_PI";
]],
[{
	arc,descr,temp,arc1,impl_set,impl_arc,curr_impl,
	seg,segments,temp,values,left,res, res_set
}],
{[
]}
)
sys_open_segment_uri([1_: /"/seb/planimetry"/, 2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

//#callReturn([1_: fixed_: gen_all_transitive_accessories,
//#	    2_: fixed_:
//#		{[
//#		]}
//#])
//#genElStr3([
//#	1_: assign_: const_: node_: values,
//#	2_: assign_: const_: pos_: arc,
//#	3_: fixed_: abc
//#])
//#searchElStr5([
//#	1_: fixed_: geron,
//#	2_: assign_: const_: pos_: arc,
//#	3_: assign_: left,
//#	4_: assign_: const_: pos_: arc1,
//#	5_: fixed_: 1_
//#])

//#callReturn([1_: fixed_: gen_checking_atomic_statement_validity_request,
//#	    2_: fixed_:
//#		{[
//#			1_: fixed_: left,
//#			2_: fixed_: values,
//#			3_: assign_: temp
//#		]}
//#])

//#nop(exit)
//#printEl([1_: group_arifmetic_descr])


//#callReturn([1_: fixed_: enable_arifmetic_processor,
//#		2_: fixed_:
//#		{[
//#		]}
//#])
//#printEl([1_: group_arifmetic_descr])
//#callReturn([1_: fixed_: disable_arifmetic_processor,
//#	    2_: fixed_:
//#		{[
//#		]}
//#])
//#printEl([1_: group_arifmetic_descr])
//#nop(exit)

callReturn([1_: fixed_: fragment_all_impl_conclusions,
	    2_: fixed_:
		{[
		]}
])

//#callReturn([1_: fixed_: gen_conjunction_union,
//#	    2_: fixed_:
//#		{[
//#			1_: fixed_: "/seb/planimetry/CONJLINK",
//#			2_: assign_: res_set
//#		]}
//#])

//#printNl([1_: /"RES_SET"/])
//#printEl([1_: res_set])

callReturn([1_: fixed_: "/operation/temp/temp",
	    2_: fixed_:
		{[
		]}
])
genElStr3([
	1_: fixed_: stype_bin_orient_role_rel,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: 1_
])
genElStr3([
	1_: fixed_: stype_bin_orient_role_rel,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: 2_
])

label(exit)
return()
end