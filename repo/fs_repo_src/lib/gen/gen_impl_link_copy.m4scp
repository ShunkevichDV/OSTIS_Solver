
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: gen_impl_link_copy.m4scp
// Description:
// Файл содержит процедуру генерации переменной связки указанного отношения
// 1-й аргумент - знак связки импликации
// 2-й аргумент - копия указанного знака связки с копированием посылки и заключения (с учетом конъюнктивной связки, если она есть)
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 14.03.11

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "ordinal.scsy"
#include "lib_search.scsy"
#include "meta_info.scsy"

procedure(gen_impl_link_copy,
[[
	1_;
	2_;
	impl=nrel_impl;
	conj=nrel_conj;
]],
[{	
	a,res,arc,arc1,seg,segments,temp,left,right,conj_set,conj_arc,new_right,new_left,new_conj_elem,conj_elem,theory
}],
{[
	1_: in_: a,
	2_: out_: res
]}
)
sys_get_location([1_: a,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

//#genEl([1_: assign_: res])
callReturn([
	1_: fixed_: search_stat_theory,
	2_: fixed_: 
		{[	
			1_: fixed_: a,
			2_: assign_: theory
		]}
])

searchElStr5([
	1_: fixed_: a,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: left,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 1_
],,exit)
searchElStr5([
	1_: fixed_: a,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: right,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 2_
],,exit)
searchSetStr3([
	1_: fixed_: left,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp,
	set3_: assign_: new_left
],,exit)

genEl([1_: assign_: node_: const_: new_right])
searchElStr3([
	1_: fixed_: conj,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: right
],,no_conj)
searchSetStr3([
	1_: fixed_: right,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp,
	set3_: assign_: conj_set
],,exit)

label(next_conj_elem)
ifVarAssign([1_: conj_arc],,no_erase_conj)
eraseEl([1_: conj_arc])
label(no_erase_conj)
searchElStr3([
	1_: fixed_: conj_set,
	2_: assign_: const_: pos_: conj_arc,
	3_: assign_: conj_elem
],,end_cycle)
searchSetStr3([
	1_: fixed_: conj_elem,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp,
	set3_: assign_: new_conj_elem
],,next_conj_elem)
genElStr3([
	1_: fixed_: new_right,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_conj_elem
],next_conj_elem,next_conj_elem)
label(end_cycle)

genEl([1_: assign_: const_: node_: res])
genElStr5([
	1_: fixed_: res,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_left,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 1_
])
genElStr5([
	1_: fixed_: res,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_right,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 2_
])
genElStr3([
	1_: fixed_: conj,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_right
])
genElStr3([
	1_: fixed_: impl,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: res
],gen_theory,gen_theory)

label(no_conj)
genEl([1_: assign_: const_: node_: res])
searchSetStr3([
	1_: fixed_: right,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp,
	set3_: assign_: new_right
],,exit)
genElStr5([
	1_: fixed_: res,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_left,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 1_
])
genElStr5([
	1_: fixed_: res,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: new_right,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 2_
])
genElStr3([
	1_: fixed_: impl,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: res
])
genElStr3([
	1_: fixed_: stype_sheaf,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: res
])

label(gen_theory)
genElStr3([
	1_: fixed_: theory,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: res
])
ifVarAssign([1_: conj_set],,no_erase_set)
eraseEl([1_: fixed_: conj_set])
label(no_erase_set)
label(exit)
return()
end