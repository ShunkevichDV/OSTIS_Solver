
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/
/////////////////////////////////////////////////////
//        File: set_is_subset.m4scp
// Description: File contains procedure to check if one 
//				of two sets is subset of the another
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 16.04.11

#include "scp_keynodes.scsy"

procedure(set_is_subset,
[[	
]],
[{	
	set1, set2,
	set, el, arc, segments, seg, bool_res, node, set_arc
	
}],
{[	// arguments
	1_:	in_: set1,		//	first set to merge
	2_: in_: set2,		//  	second set ()subset
	3_: out_: bool_res
]}
)
/* need to set segment that contains result node as default to generate answer in it */
sys_get_location([1_: fixed_: set2, 2_: assign_: seg])	
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

searchSetStr3([
	1_: fixed_: set2,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: node,
	set3_: assign_: set
])

label(next)
ifVarAssign([1_: set_arc],,noerase)
eraseEl([1_: set_arc])
label(noerase)
searchElStr3([
	1_: fixed_: set,
	2_: assign_: const_: pos_: set_arc,
	3_: assign_: node
],,gen_good_result)
searchElStr3([
	1_: fixed_: set1,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: node
],next,gen_bad_result)

label(gen_good_result)
genEl([1_: assign_: const_: node_: bool_res])
label(gen_bad_result)
ifVarAssign([1_: set],,no_erase_set)
eraseEl([1_: fixed_: set])
label(no_erase_set)
return()
end()