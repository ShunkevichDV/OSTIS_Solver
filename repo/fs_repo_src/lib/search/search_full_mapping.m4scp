
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: search_full_mapping.m4scp
// Description: Файл содержит процедуру поиска полного соответствия
//				константных узлов из БЗ и переменных из шаблона
//				с учетом параметров поиска
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 22.01.2011

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "meta_info.scsy"
#include "lib_erase.scsy"
#include "lib_other.scsy"
#include "lib_gen.scsy"

procedure(search_full_mapping,
[[	
]],
[{	
	copy_objects_set,temp_objects,rel_set,temp_set,search_res,mapping_set,objects_set,temp_obj,t,
	template,arc,arc1,node,element,el,seg,segments,temp,set,object,temp_arc,res_copy
}],
{[		
	//#шаблон
	1_: in_: template,
	//#множество заданных конкретных узлов из БЗ
	2_: in_: objects_set,
	//#результирующее мн-во, которое представляет собой мн-во связок, где под 1_ находится переменная из шаблона, а под 2_ - соответствующей ей узел из БЗ
	3_: out_: search_res
]}
)
sys_get_location([1_: template,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

//#genEl([1_: assign_: const_: node_: mapping_set])

sys_search([
	1_: fixed_: template,
	2_: assign_: search_res
])

ifVarAssign([1_: search_res],,exit)

searchSetStr3([
	1_: fixed_: search_res,
	2_: assign_: const_: pos_: temp_arc,
	3_: assign_: const_: node_: temp,
	set3_: assign_: res_copy
],,exit)

label(next_elem)
ifVarAssign([1_: copy_objects_set],,noerase_obj)
eraseEl([1_: fixed_: copy_objects_set])
label(noerase_obj)
ifVarAssign([1_: temp_arc],,noerase_temparc)
eraseEl([1_: fixed_: temp_arc])
label(noerase_temparc)
searchElStr3([
	1_: fixed_: res_copy,
	2_: assign_: const_: pos_: temp_arc,
	3_: assign_: const_: node_: element
],,exit)

callReturn([1_: fixed_: gen_relation_domain,
	    2_: fixed_:
		{[
			1_: fixed_: element,
			2_: fixed_: 2_,
			3_: assign_: temp_set
		]}
])

ifVarAssign([1_: temp_set],,next_elem)
searchSetStr3([
	1_: fixed_: objects_set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: temp,
	set3_: assign_: copy_objects_set
])
//#printEl([1_: copy_objects_set])
selectNStr3([
	1_: fixed_: temp_set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: temp,
	set3_: fixed_: copy_objects_set
])
//#printEl([1_: copy_objects_set])
searchElStr3([
	1_: fixed_: copy_objects_set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp
],,next_elem)
eraseSetStr3([
	1_: fixed_: f_: element,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: f_: temp
],next_elem)

label(exit)
/////////////////////////////////////////
//#callReturn([1_: fixed_: erase_sys_search_result,
//#	    2_: fixed_:
//#		{[
//#			1_: fixed_: search_res
//#		]}
//#])
ifVarAssign([1_: temp_set],,no_erase_temp_set)
eraseEl([1_: fixed_: temp_set])
label(no_erase_temp_set)
ifVarAssign([1_: res_copy],,no_erase_res_copy)
eraseEl([1_: fixed_: res_copy])
label(no_erase_res_copy)
ifVarAssign([1_: copy_objects_set],,no_erase_copy_objects_set)
eraseEl([1_: fixed_: copy_objects_set])
label(no_erase_copy_objects_set)
return()
end
