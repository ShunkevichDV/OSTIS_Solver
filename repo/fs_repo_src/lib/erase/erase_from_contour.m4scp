
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

// ///////////////////////////////////////////////////
//        File: erase_from_contour.m4scp
// Description:
// This file contains procedure to destroy elements of set
// from contour
// 1st parameter - contour
// 2nd parameter - set
// ///////////////////////////////////////////////////
// 		Author: Sergei Zalivako
//        Date: 14.06.11

#include "scp_keynodes.scsy"

procedure(erase,
[[	
]],
[{	
	contour, set, arcFromSet, element, arcFromContour,
	arcsForDeletion, arcVar, deletedArc
}],
{[
	1_: in_: contour,
	2_: in_: set
]}
)

// Просмотр элементов множества
label(setView)
	
	// Ищем очередной элемент
	searchElStr3([
		1_: fixed_: set,
		2_: assign_: const_: pos_: arc_: arcFromSet,
		3_: assign_: element
	], , exit)
	
	// Удаляем дугу из множества к его элементу
	eraseEl([
		1_: fixed_: f_: arcFromSet
	])
	
	// Находим множество дуг, которые необходимо удалить
	searchSetStr3([
		1_: fixed_: contour,
		2_: assign_: const_: pos_: arc_: arcFromContour,
		3_: fixed_: element,
		set2_: assign_: const_: node_: arcsForDeletion
	], , setView)
	
	// Удаляем найденные дуги
	label(arcsDeletion)
		
		// Находим очередную дугу для удаления
		searchElStr3([
			1_: fixed_: arcsForDeletion,
			2_: assign_: const_: pos_: arc_: arcVar,
			3_: assign_: const_: pos_: arc_: deletedArc
		], , setView)
		
		// Удаляем дугу из множества найденных дуг
		eraseEl([
			1_: fixed_: f_: arcVar
		])
		
		// Удаляем найденную дугу из контура
		eraseEl([
			1_: fixed_: f_: deletedArc
		], arcsDeletion, arcsDeletion)
	
// Выход из процедуры в случае окончания перебора
label(exit)

return()
end