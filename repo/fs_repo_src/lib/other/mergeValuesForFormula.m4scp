
/*-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modfirst_ely
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  first_el not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: mergeValuesForFormula.m4scp
// Description: Файл содержит процедуру для подстановки множества значений в формулу
/////////////////////////////////////////////////////
// 		Author: Sergei Zalivako
//        Date: 28.03.2011 

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_set.scsy"
#include "lib_search.scsy"
#include "lib_answer.scsy"
#include "lib_set.scsy"
#include "meta_info.scsy"

procedure(run,
[[		
	// Процедура "склеивания" двух узлов в базе знаний
	full_merge;	
]],
[{
	someRelationLink, someObject, someRelation,
	someRelationLinksCopy, someRelationLinkCopy,
	arcForChecking, arcVar, nodeVar, arc, nodeVar1,
	valuesForMerge, valueNode, attributeArc,
	formula, checkedRelation,
	answer, temp, out_set
	
}],
{[
	1_: in_: valuesForMerge, 
	2_: in_: out_: formula
]}
)

// Просматриваем объекты, которые должны быть подставлены в формулу
label(viewValuesForMerge)

	// Ищем объект, характеристику которого надо подставить в формулу
	searchElStr3([
		1_: fixed_: valuesForMerge,
		2_: assign_: arc_: const_: pos_: actual_: arcVar,
		3_: assign_: node_: const_: someObject
	], , formulaCalculation)
	
	// Удаляем дугу из множества подставляемых в формулу объектов
	eraseEl([
		1_: fixed_: arcVar
	])
	
	// Делаем копию всех связок отношений, первым кортежем которых будет являться найденный объект
	searchSetStr5([
		1_: assign_: node_: const_: someRelationLink,
		2_: assign_: arc_: const_: pos_: actual_: arcVar,
		3_: fixed_: someObject,
		4_: assign_: arc_: const_: pos_: actual_: attributeArc,
		5_: fixed_: 1_,
		set1_: assign_: const_: node_: someRelationLinksCopy
	])
	
	// Проверяем все связки на принадлежность к контуру
	label(findLinkNotInFormula)
		
		// Ищем очередную связку
		searchElStr3([
			1_: fixed_: someRelationLinksCopy,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: assign_: const_: node_: someRelationLink
		], , formulaCalculation )
		
		//  Удаляем дугу к очередной связке
		eraseEl([
			1_: fixed_: f_: arcVar
		])

		// Проверяем, что данная связка принадлежит контуру.
		searchElStr3([
			1_: fixed_: formula,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: fixed_: someRelationLink
		], findLinkNotInFormula)
		
			
			searchSetStr3([
				1_: assign_: const_: node_: temp,
				2_: assign_: const_: pos_: arc,
				3_: fixed_: someRelationLink,
				set1_: assign_: out_set
			])
			label(next_rel)
			ifVarAssign([1_: checkedRelation],,noerase)
			eraseElStr3([
				1_: fixed_: out_set,
				2_: assign_: const_: pos_: f_: arc,
				3_: fixed_: checkedRelation
			])
			label(noerase)
				searchElStr3([
					1_: fixed_: out_set,
					2_: assign_: const_: pos_: arc,
					3_: assign_: node_: const_: checkedRelation
				])
				ifCoin([1_: stype_sheaf, 2_: checkedRelation],next_rel)
		
		// Проверяем, что найденное отношение находится в контуре
		searchElStr3([
			1_: fixed_: formula,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: fixed_: checkedRelation
		], , findLinkNotInFormula)
		
	searchElStr5([
			1_: fixed_: someRelationLink,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: assign_: const_: node_: valueNode,
			4_: assign_: arc_: const_: pos_: actual_: attributeArc,
			5_: fixed_: 2_
	])
	
	searchSetStr3([
		1_: fixed_: checkedRelation,
		2_: assign_: arc_: const_: pos_: actual_: arcVar,
		3_: assign_: node_: const_: someRelationLink,
		set3_: assign_: node_: const_: someRelationLinkCopy
	])
	
	label(someRelationLinksView)
		
		searchElStr3([
			1_: fixed_: someRelationLinkCopy,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: assign_: node_: const_: someRelationLink
		])
		
		eraseEl([
			1_: fixed_: arcVar
		])
		
		searchElStr3([
			1_: fixed_: formula,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: fixed_: someRelationLink
		], , someRelationLinksView)
		
		
		searchElStr5([
			1_: fixed_: someRelationLink,
			2_: assign_: arc_: const_: pos_: actual_: arcVar,
			3_: assign_: const_: node_: nodeVar,
			4_: assign_: arc_: const_: pos_: actual_: attributeArc,
			5_: fixed_: 2_
		])
		
		callReturn([
			1_: fixed_: full_merge,
			2_: fixed_: {[
				1_: nodeVar,
				2_: valueNode
			]}
		])
			
	label(eraseCopy)
		eraseEl([
			1_: fixed_: f_: someRelationLinksCopy
		], viewValuesForMerge, viewValuesForMerge)
		
label(formulaCalculation)

ifVarAssign([
	1_: someRelationLinksCopy
], , exit)

eraseEl([
	1_: fixed_: f_: someRelationLinksCopy
])

ifVarAssign([
	1_: someRelationLinkCopy
], , exit)

eraseEl([
	1_: fixed_: f_: someRelationLinkCopy
])

label(exit)

return()
	
end