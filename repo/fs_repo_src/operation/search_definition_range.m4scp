/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

//----------------------------------------------------------------------
//        File: search_definition_range.m4scp
// Description: File contains operation for definition range search.
//----------------------------------------------------------------------
//              Author: Ivan Kosik
//        Date: 17.11.11

#include "scp_keynodes.scsy"
#include "etc_questions.scsy"
#include "com_keynodes.scsy"
#include "_keynodes.scsy"
#include "lib_search.scsy"
#include "lib_set.scsy"
#include "lib_answer.scsy"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// program that initialize operation
program(init_op,
	[[
		// 	ключевой узел инициированный вопрос
		q_initiated;
		// множество элементов для которых будут отслеживаться события
		set_of_traced_element = {1_: q_initiated };
		run_op;
		catch_output_arc;
		answer_make;
	]],
	[{
	}])

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: program: init_op: point 1.1\n"/
		])
		
	// subscribe to handle output pairs from "initiated question" node
	sys_set_event_handler([
		1_: fixed_: catch_output_arc,
		2_: fixed_: run_op,
		3_: fixed_: {1_: q_initiated}
		])

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: program: init_op: point 1.2\n"/
		])
		
	return()
end()
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// procedure, that process question and make answer
procedure(run_op,
	[[
		search_definition_range;
		q_search_definition_range;
		//#set_sub;
		//#set_rm_el;
		//#set_merge;
		//#search_decomposition;
		//#search_base_cycle;
	]],
	[{
		// input params
		descr, element, arc, question_node,
				// other
				descr2, result, a, segment
	}],
	{[
		1_: in_: descr,
		2_: in_: element,
		3_: in_: arc,
		4_: in_: question_node
	]}
	)

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.1\n"/
	])

		/* need to set segment that contains question node as default to generate answer in it */
	sys_get_location([
		1_: fixed_: question_node,
		2_: assign_: segment
	])
	sys_open_segment([
		1_: fixed_: segment
	])
	sys_set_default_segment([
		1_: fixed_: segment
	])

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.2: question_node, q_search_definition_range\n"/
	])
	//#printEl([
//#		1_: fixed_: question_node
//#	])


	//#printEl([
//#		1_: fixed_: q_search_definition_range
//#	])
	
	searchElStr3([
		1_: fixed_: q_search_definition_range,
		2_: assign_: const_: pos_: arc_: a,
		3_: fixed_: question_node
	], ,finish_op)
        

	/* call cycle to find definition range for all elements in a question */
	callReturn([
		1_: fixed_: search_base_cycle,
		2_: fixed_: {[
			1_: question_node,
			2_: search_definition_range,
			3_: result
		]}
	], , , , goto_error)
	//#], descr2, , , goto_error)
	
	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.3: result\n"/
	])
	//#printEl([
//#		1_: fixed_: result
//#	])

	
	//#label(goto_answer)

	/* remove question node from result */
	callReturn([
		1_: fixed_: set_rm_el,
		2_: fixed_: {[
			1_: result,
			2_: question_node
		]}
	], , , , goto_error)
	//#], descr2, , , goto_error)
	

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.4: result\n"/
	])
	//#printEl([
//#		1_: fixed_: result
//#	])
	
	
	/* make answer */
	callReturn([
		1_: fixed_: answer_make,
		2_: fixed_: {[
			1_: question_node,
			2_: result
		]}
	], , finish_op, , goto_error)
	//#], descr2, finish_op, , goto_error)
			
			
	label(finish_op)

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.5: result\n"/
	])
	//#printEl([
	//#	1_: fixed_: result
	//#])
	//#printNl([1_: fixed_: /"\n RESULT OF SEARCH ALL SUPERSETS \n"/])

	return()

	label(goto_error)
	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: run_op: point 2.6: ! RUNTIME ERROR !\n"/
	])
	
	return()
	
end()
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// procedure, that search for definition range
procedure(search_definition_range,
	[[
	]],
	[{
	// input params and variables
		descr, element, arc, question_node,result,
		segment  //,
	//	tDescr,
		//tArc1, tArc2, 
		//tNode1, tNode2, currentNodeInLastWave, arcOfCurrentNodeInLastWave
	}],
	{[
		1_: in_: question_node,
		2_: in_: result
	]})

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: search_definition_range: point 3.1\n"/
	])
	//#printNl([1_: fixed_: /"\nchecking: search_definition_range \n"/])
	//#printEl([1_: fixed_: question_node])
	sys_get_location([
		1_: fixed_: question_node,
		2_: assign_: segment
		])
	sys_open_segment([
		1_: fixed_: segment
		])
	sys_set_default_segment([
		1_: fixed_: segment
		])

	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: search_definition_range: point 3.2: result\n"/
	])
	//#printEl([
//#		1_: fixed_: result
//#	])
	callReturn([
		1_: fixed_: search_base_rel,
		2_: fixed_: {[
			1_: question_node,
			2_: nrel_definition_range,
			3_: result
		]}
	], , , , error)
	//#], descr, finish, , error)
		
	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: search_definition_range: point 3.3\n"/
	])
	
	label(finish)
	
	printNl([
		1_: fixed_: /"\nChecking: search_definition_range: procedure: search_definition_range: point 3.4\n"/
	])

	//#printNl([1_: fixed_: /"\n RESULT OF SEARCH DEFINITION RANGE \n"/])
	//#printEl([1_: fixed_: result])

	return()

	label(error)
	printNl([
		1_: fixed_: /"\nOp_definition_range_search\nruntime_error"/
		])		
	return()

	end