
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: base_rel_in_with_sheaf.m4scp
// Description: 
/////////////////////////////////////////////////////
// 		Author: Denis Koronchik
//        Date: 22.12.10
//	Modificatinon: 19.11.11, Kharkunov Eugene - rewritten search with using NSM pattern

#include "_keynodes.scsy"
#include "scp_keynodes.scsy"

/*!
	Procedure to find construction showed on schema with specified relation.
	
		relation
			|
			|
			v
		O<======== (-)
					|-----> e1
					|
					|-----> e2
					|
					....
					|-----> en
					
	@result	Result contains whole construction (excluding O) set and binary pair (author relation)
*/
procedure(base_rel_in_with_sheaf,
[[
	pattern = [
		_rel_arc = (_relation ->> _tmp_rel);
		_con_a2 = (_tmp_rel ->> _elem);
		_con_a1 = (_tmp_rel ->> _node);
		_attr_a1 = (1_ ->> _con_a1);
		_attr_a2 = (2_ ->> _con_a2);
		_arc = (_node ->> _elem_node)
	];
]],
[{
	element, relation, result, segment, t_seg, _a
}],
{[
	1_: in_: element,
	2_: in_: relation,
	3_: in_: result
]})

sys_get_location([1_: fixed_: element, 2_: assign_: segment])
sys_spin_segment([1_: fixed_: segment, 2_: assign_: t_seg])

/* need to set segment that contains result node as default to generate answer in it */
sys_get_location([1_: fixed_: result, 2_: assign_: segment])
sys_open_segment([1_: fixed_: segment])
sys_set_default_segment([1_: fixed_: segment])


sys_search([
	1_: fixed_: pattern,
	3_: fixed_: {
		{1_: _relation, 2_: relation},
		{1_: _elem, 2_: element}
	},
	4_: fixed_: result
], , finish)

genElStr3([
	1_: fixed_: result,
	2_: assign_: const_: pos_: arc_: _a,
	3_: fixed_: relation
])

genElStr3([
	1_: fixed_: result,
	2_: assign_: const_: pos_: arc_: _a,
	3_: fixed_: 1_
])

genElStr3([
	1_: fixed_: result,
	2_: assign_: const_: pos_: arc_: _a,
	3_: fixed_: 2_
])

label(finish)

return()

end
