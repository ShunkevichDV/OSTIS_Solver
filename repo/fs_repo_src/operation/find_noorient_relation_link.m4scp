/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: find_noorient_relation_link.m4scp
// Description: File contains operation to find a link
// 			of a noorient relation between 
//			given objects if it exists
/////////////////////////////////////////////////////
// 		Author: Zhogun Evgeniy
//        Date: 16.04.11
#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "meta_info.scsy"
#include "lib_search.scsy"
#include "lib_answer.scsy"
#include "lib_set.scsy"

program(init_op,
[[	
	q_initiated;
	catch_output_arc;
]],
[{
	nodeVar
}],
{[
]}
)
sys_set_event_handler([
	1_: fixed_: catch_output_arc,
	2_: fixed_: find_noorient_relation_link,
	3_: fixed_: {1_: q_initiated},
	4_: assign_: nodeVar
])

return()
end

procedure(find_noorient_relation_link,
[[
	bin_rel_pattern=[
		_rel->>_link;
		_link={. 1_:: _obj1, 2_:: _obj2 .};
	];
	rrel_answer_is_present;
	rrel_answer_is_absent;
	q_var_value;
	q_initiated;
	search_quantity_value;
	here=/"\n\nI have entered FIND BINARY RELATION LINK\n\n"/;
	exited=/"\n\nI have exited FIND BINARY RELATION LINK\n\n"/;
]],
[{	
	inputarc,arc,arc1,value,handler,element,seg,segments,temp,attr,req_arc,answer,rel,set,rel_set,
	rel_arc,link,bool_res,temp_set,temp_arc
}],
{[
	1_: in_: handler,
	2_: in_: element,
	3_: in_: inputarc,
	4_: in_: value
]}
)
sys_get_location([1_: value,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

searchElStr3([
	1_: fixed_: q_noorient_relation_link,
	2_: assign_: const_: pos_: req_arc,
	3_: fixed_: value
],,exit)
searchElStr3([
	1_: assign_: const_: pos_: attr,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: req_arc
],exit)

printNl([1_: here])

eraseEl([1_: fixed_: inputarc])

searchSetStr3([
	1_: fixed_: value,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: temp,
	set3_: assign_: set
])

searchElStr5([
	1_: fixed_: value,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: rel,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: 1_
])
eraseElStr3([
	1_: fixed_: set,
	2_: assign_: const_: pos_: f_: arc,
	3_: fixed_: rel
])

searchSetStr3([
	1_: fixed_: rel,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: temp,
	set3_: assign_: rel_set
])

label(next_link)
ifVarAssign([1_: rel_arc],,noerase)
eraseEl([1_: rel_arc])
label(noerase)
searchElStr3([
	1_: fixed_: rel_set,
	2_: assign_: const_: pos_: rel_arc,
	3_: assign_: node_: const_: link
],,nogen)
callReturn([
	1_: fixed_: set_is_subset,
	2_: fixed_:
		{[
			1_: fixed_: link,
			2_: fixed_: set,
			3_: assign_: bool_res
		]}
])
ifVarAssign([1_: bool_res],gen,next_link)

label(gen)
eraseEl([1_: fixed_: bool_res])
genElStr3([
	1_: assign_: node_: const_: answer,
	2_: assign_: pos_: const_: arc,
	3_: fixed_: link
])

/////////////////////////////////////////////////////
// Call of the answer making procedure
callReturn([
	1_:	fixed_: answer_make,
	2_:	fixed_: {[
			1_: value,
			2_: answer
		]}
	]
)

printNl([1_: /"REQUESTED NOORIENT LINK EXISTS:\n"/])
printEl([1_: link])
///////////////////////////////////////////////////////////////////////
searchSetStr3([
	1_: fixed_: value,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: temp,
	set3_: assign_: temp_set
])
eraseElStr3([
	1_: fixed_: temp_set,
	2_: assign_: const_: pos_: f_: arc,
	3_: fixed_: rel
])
callReturn([1_: fixed_: set_unite_to_first,
	    2_: fixed_:
		{[
			1_: fixed_: task_solving_steps,
			2_: fixed_: temp_set
		]}
])
eraseEl([1_: fixed_: temp_set])
///////////////////////////////////////////////////////////////////////

printNl([1_: /"PATH ELEMENTS"/])
printEl([1_: task_solving_steps])
genElStr3([
	1_: fixed_: rrel_answer_is_present,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: req_arc
],next,next)

label(nogen)
eraseSetStr3([
	1_: fixed_: task_solving_steps,
	2_: assign_: const_: pos_: f_: arc,
	3_: assign_: node_: const_: temp
])
searchSetStr3([
	1_: fixed_: group_looked_throught,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: temp,
	set3_: fixed_: task_solving_steps
])
eraseSetStr3([
	1_: fixed_: group_looked_throught,
	2_: assign_: const_: pos_: f_: arc,
	3_: assign_: node_: const_: temp
])
genElStr3([
	1_: fixed_: rrel_answer_is_absent,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: req_arc
],next,next)

label(next)

genElStr3([
	1_: fixed_: q_initiated,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: value
])

label(exit)
//#//#printEl([1_: req])
printNl([1_: exited])
ifVarAssign([1_: set],,next_erase)
eraseEl([1_: fixed_: set])
label(next_erase)
ifVarAssign([1_: rel_set],,exit_at_all)
eraseEl([1_: fixed_: rel_set])
label(exit_at_all)
return()
end