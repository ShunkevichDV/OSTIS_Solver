#include "scp_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_search.scsy"
#include "lib_set.scsy"
#include "lib_answer.scsy"

program(init_op,
[[
	q_initiated;
	catch_output_arc;
	run_op;
]],
[{
}])

sys_set_event_handler([
	1_: fixed_: catch_output_arc,
	2_: fixed_: run_op,
	3_: fixed_: {1_: q_initiated}
])

return()

end()

procedure(run_op,
[[
	q_search_proof;
	search_base_cycle;
	search_proof;
	set_rm_el;
	answer_make;
]],
[{
	descr, element, arc, question_node, a, segment, result
}],
{[
	1_: in_: descr,
	2_: in_: element,
	3_: in_: arc,
	4_: in_: question_node
]})

sys_get_location([1_: fixed_: question_node, 2_: assign_: segment])
sys_open_segment([1_: fixed_: segment])
sys_set_default_segment([1_: fixed_: segment])

searchElStr3([
	1_: fixed_: q_search_proof,
	2_: assign_: const_: pos_: arc_: a,
	3_: fixed_: question_node
], , finish)

callReturn([
	1_: fixed_: search_base_cycle,
	2_: fixed_: {[
		1_: question_node,
		2_: search_proof,
		3_: result
	]}
], , , error)

callReturn([
	1_: fixed_: set_rm_el,
	2_: fixed_: {[
		1_: result,
		2_: question_node
	]}
], , , error)

callReturn([
	1_: fixed_: answer_make,
	2_: fixed_: {[
		1_: question_node,
		2_: result
	]}
], , , error)

label(error)

label(finish)

return()

end