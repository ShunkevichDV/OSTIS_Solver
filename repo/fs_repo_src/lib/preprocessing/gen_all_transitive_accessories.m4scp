//#sss
#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_gen.scsy"
#include "lib_erase.scsy"
#include "meta_info.scsy"

program(gen_all_transitive_accessories,
[[	
	inclusion_pattern=[
		nrel_inclusion->> {. 1_:: _node1, 2_:: _elem .};
		_elem->>_child;
		stype_concept_norel->>_node1;
		stype_concept_norel->>_elem;
	];
]],
[{
	arc,temp,arc1,set,child_arc,child,set1
}],
{[
]}
)
printNl([1_: /"GENERING ACCESSORIES..."/])

sys_search([
	1_: fixed_: inclusion_pattern,
	2_: fixed_: {
		{1_: _child, 2_: assign_: set_: set1}
	}
],,exit)

printEl([1_: set1])
callReturn([
	1_: fixed_: erase_multiple_arcs,
	2_: fixed_:
		{[
			1_: fixed_: set1,
			2_: assign_: set 
		]}
])
eraseEl([1_: fixed_: set1])
printEl([1_: set])

label(next_child)
searchElStr3([
	1_: fixed_: set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: child
],,exit)
eraseEl([1_: fixed_: arc])
printNl([1_: /"CHILD ACCESSORY"/])
printEl([1_: child])
callReturn([
	1_: fixed_: gen_all_accessories,
	2_: fixed_:
		{[
			1_: fixed_: child
		]}
],next_child,next_child)

label(exit)
printNl([1_: /"GENERING ACCESSORIES COMPLETED"/])
return()
end