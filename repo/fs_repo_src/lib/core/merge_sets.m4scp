
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/
/////////////////////////////////////////////////////
//        File: merge_sets.m4scp
// Description: File contains procedure to merge 
//				two sets
/////////////////////////////////////////////////////
// 		Author: Startsev Sergei
//        Date: 23.01.2011

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "meta_info.scsy"

/* Procedure for merge set1 into set2
*/
procedure(merge_sets,
[[	// constants

	//#отладочная информация, закомментировать или убрать	
	here=/"\n\nI have entered merge_sets!!!\n\n"/;
	exited=/"\n\nI have exited merge_sets!!!\n\n"/;
]],
[{	// variables

	// input
	set1, set2,
	// other
	set, node,el,elements_set, arc, segments,seg
	
}],
{[	// arguments
	1_:	in_: set1,		//	first set to merge
	2_: in_: set2		//  second set to merge (result)
]}
)

/* need to set segment that contains result node as default to generate answer in it */
sys_get_location([1_: set2,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

//#printNl([1_: here])

// copy elements from set1 for processing
searchSetStr3([
	1_: fixed_: set1,
	2_: assign_: arc,
	3_: assign_: node,
	set3_: assign_: elements_set
	], , , goto_error)

// iterate elements of set1 and append them into result set
label(process_set1)

ifVarAssign([1_: el],,noerase)
eraseElStr3([
	1_: fixed_: elements_set,
	2_: assign_: f_: arc,
	3_: fixed_: el
])
label(noerase)

searchElStr3([
	1_: fixed_: elements_set,
	2_: assign_: arc,
	3_: assign_: el
], , goto_finish, goto_error)
	
genElStr3([
	1_: fixed_: set2,
	2_: assign_: const_: pos_: arc_: arc,
	3_: fixed_: el
], process_set1, , goto_error)
	
label(goto_error)
//!	FIXME:	add error processing (garbage cleaning)

label(goto_finish)

eraseEl([1_: fixed_: elements_set])

//#printNl([1_: exited])

return()
end()